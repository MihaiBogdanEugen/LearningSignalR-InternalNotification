//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LearningSignalR.DbBuilder.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.SpecialSettingAttribute(global::System.Configuration.SpecialSetting.ConnectionString)]
        [global::System.Configuration.DefaultSettingValueAttribute("Data Source=localhost\\SQLEXPRESS2016;Initial Catalog=LearningSignalRDb;Integrated" +
            " Security=True")]
        public string DefaultConnection {
            get {
                return ((string)(this["DefaultConnection"]));
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool UserLockoutEnabledByDefault {
            get {
                return ((bool)(this["UserLockoutEnabledByDefault"]));
            }
            set {
                this["UserLockoutEnabledByDefault"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool PasswordRequireDigit {
            get {
                return ((bool)(this["PasswordRequireDigit"]));
            }
            set {
                this["PasswordRequireDigit"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool PasswordRequireLowercase {
            get {
                return ((bool)(this["PasswordRequireLowercase"]));
            }
            set {
                this["PasswordRequireLowercase"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool PasswordRequireNonLetterOrDigit {
            get {
                return ((bool)(this["PasswordRequireNonLetterOrDigit"]));
            }
            set {
                this["PasswordRequireNonLetterOrDigit"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool PasswordRequireUppercase {
            get {
                return ((bool)(this["PasswordRequireUppercase"]));
            }
            set {
                this["PasswordRequireUppercase"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("8")]
        public int PasswordRequiredLength {
            get {
                return ((int)(this["PasswordRequiredLength"]));
            }
            set {
                this["PasswordRequiredLength"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5")]
        public int UserAccountLockoutMinutes {
            get {
                return ((int)(this["UserAccountLockoutMinutes"]));
            }
            set {
                this["UserAccountLockoutMinutes"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool UserAllowOnlyAlphanumericUserNames {
            get {
                return ((bool)(this["UserAllowOnlyAlphanumericUserNames"]));
            }
            set {
                this["UserAllowOnlyAlphanumericUserNames"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5")]
        public int UserMaxFailedAccessAttemptsBeforeLockout {
            get {
                return ((int)(this["UserMaxFailedAccessAttemptsBeforeLockout"]));
            }
            set {
                this["UserMaxFailedAccessAttemptsBeforeLockout"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool UserRequireUniqueEmail {
            get {
                return ((bool)(this["UserRequireUniqueEmail"]));
            }
            set {
                this["UserRequireUniqueEmail"] = value;
            }
        }
    }
}
